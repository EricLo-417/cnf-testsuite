name: Crystal Specs
on: [push, pull_request]
jobs:
  debug_status:
    name: Debug Status
    runs-on: ubuntu-20.04	
    env:
      skip_debug: ${{secrets.SKIP_DEBUG}}
      release_debug: ${{secrets.RELEASE_DEBUG}}
      build_debug: ${{secrets.BUILD_DEBUG}}
    steps:
    - name: Create Debug Files
      run: |
        touch skip_debug
        touch release_debug
        touch build_debug
        if [[ "$skip_debug" == 'true' ]]; then
           echo 'true' > skip_debug
        fi
        if [[ "$release_debug" == 'true' ]]; then
           echo 'true' > release_debug
        fi
        if [[ "$build_debug" == 'true' ]]; then
           echo 'true' > build_debug
        fi
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: debug_status
        path: |
          skip_debug
          release_debug
          build_debug
  debug_output:
    name: Debug Outputs
    needs: [debug_status]
    runs-on: ubuntu-20.04	
    outputs:
      skip-debug: ${{ steps.skip-debug.outputs.debug }}
      release-debug: ${{ steps.release-debug.outputs.debug }}
      build-debug: ${{ steps.build-debug.outputs.debug }}
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: debug_status
    - id: skip-debug
      run: |
        if grep -q 'true' "./skip_debug"; then 
          echo "::set-output name=debug::true"
        fi
    - id: release-debug
      run: |
        if grep -q 'true' "./release_debug"; then 
          echo "::set-output name=debug::true"
        fi
    - id: build-debug
      run: |
        if grep -q 'true' "./build_debug"; then 
          echo "::set-output name=debug::true"
        fi
  tests:
    name: Fetch Matrix Tests
    runs-on: ubuntu-20.04	
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - id: set-matrix
      run: |
        JSON="{\"include\":["
        TEST_ARRAY=$(grep -roP --no-filename 'tags: \K(\[|")(.*)(\]|")' spec/ | tr -d '[],' | tr -s '\n' ' ' | xargs -n1 | sort -u | xargs)
        TEST_ARRAY=("${TEST_ARRAY[@]/testsuite-config-lifecycle/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/testsuite-microservice/}")
        TEST_ARRAY=("${TEST_ARRAY[@]/testsuite-all/}")
        
        TEST_LIST=$(for i in ${TEST_ARRAY[@]}
        do
                 echo "{\"spec\":\"$i\"}," | tr -d '\n'
        done)
        TEST_LIST="${TEST_LIST%?}"
        JSON="$JSON$TEST_LIST"
        JSON="$JSON]}"

        echo "TESTS: $JSON"
        echo "::set-output name=matrix::$JSON"

  skip:
    name: Skip Build
    runs-on: ubuntu-20.04	
    needs: [debug_output]
    outputs:
      skip: ${{ steps.skip.outputs.skip }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: mxschmitt/action-tmate@v3
      if: needs.debug_output.outputs.skip-debug == 'true'
    - id: skip
      run: |
        echo "::set-output name=skip::$(.github/workflows/skip.sh)"

  spec:
    name: Crystal Specs
    needs: [tests, skip]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.tests.outputs.matrix)}}
    if: needs.skip.outputs.skip == 'false'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Crystal
      env:
        CRYSTAL_VERSION: 1.0.0
        CRYSTAL_URL: https://github.com/crystal-lang/crystal/releases/download
      run: |
        wget -O crystal.deb "$CRYSTAL_URL/$CRYSTAL_VERSION/crystal_$CRYSTAL_VERSION-1_amd64.deb" --progress=dot:giga; 
        sudo apt install -y --no-install-recommends \
        git \
        libssl-dev \
        libxml2-dev \
        libyaml-dev \
        libgmp-dev \
        libz-dev \
        ./crystal.deb \
        && sudo rm -rf /var/lib/apt/lists/*
    - name: Create Kind Cluster 
      run: |
        cat << EOF > /tmp/cluster.yml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry:5000"]
            endpoint = ["http://localhost:5000"]
        EOF
        kind create cluster --config=/tmp/cluster.yml
        kubectl get nodes 
    - name: Cache crystal shards
      uses: actions/cache@v2
      env:
        cache-name: cache-crystal-shards
      with:
        path: ./lib
        key: lib-${{ hashFiles('**/shard.lock') }}
        restore-keys: |
          lib-
    - name: Setup CNF-Conformance
      env:
        PROTECTED_DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        PROTECTED_DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        docker login -u $PROTECTED_DOCKERHUB_USERNAME -p $PROTECTED_DOCKERHUB_PASSWORD
        helm repo add stable https://cncf.gitlab.io/stable
        git fetch --all --tags --force
        shards install  
    - name: Run Crystal Spec
      env:
        GITHUB_USER: ${{ secrets.GH_USER }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        PROTECTED_DOCKERHUB_EMAIL: ${{ secrets.PROTECTED_DOCKERHUB_EMAIL }}
        PROTECTED_DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        PROTECTED_DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        LOG_LEVEL=info crystal spec --warnings none --tag ${{ matrix.spec }} -v

  build:
    name: Build Release
    # needs: [skip, debug_output]
    runs-on: ubuntu-latest
    # if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # - name: Debug
    #   uses: mxschmitt/action-tmate@v3
      # if: needs.debug_output.outputs.build-debug == 'true'
    - name: Cache crystal shards
      uses: actions/cache@v2
      env:
        cache-name: cache-crystal-shards
      with:
        path: ./lib
        key: lib-${{ hashFiles('**/shard.lock') }}
        restore-keys: |
          lib-
    - name: Build Release
      run: |
        docker pull conformance/crystal:0.35.1
        docker run --rm -v $PWD:/workspace -w /workspace conformance/crystal:0.35.1-llvm10-grep shards install
        docker run --rm -v $PWD:/workspace -w /workspace conformance/crystal:0.35.1-llvm10-grep crystal build --warnings none src/cnf-testsuite.cr --release --static --link-flags '-lxml2 -llzma'
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: release
        path: cnf-testsuite
        
  test_helm_chart_in_airgapped_env:
    name: Test helm chart In An Airgapped Env.
    needs: [build, debug_output, skip]
    runs-on: [default]
    #runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    # - uses: mxschmitt/action-tmate@v3
    #   if: needs.debug_output.outputs.release-debug == 'true'
    - name: Create Cluster & Run Tests.
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        sudo rm -rf /tmp/*
        export DIR=$(uuidgen)
        mkdir /shared/$DIR
        # Create Airgapped Tar
        chmod +x ./cnf-testsuite
        ./cnf-testsuite setup 
        helm repo add stable https://cncf.gitlab.io/stable
        ./cnf-testsuite airgapped output-file=/shared/$DIR/airgapped.tar.gz
        LOG_LEVEL=debug ./cnf-testsuite cnf_setup cnf-config=example-cnfs/coredns/cnf-testsuite.yml airgapped=/shared/$DIR/airgapped.tar.gz
        #DOTO Use pre-created airgapped.tar.gz
        # wget --auth-no-challenge --header='Accept:application/octet-stream' https://$GITHUB_TOKEN:@api.github.com/repos/cncf/cnf-testsuite/releases/assets/38092818 -O airgapped.tar.gz
        cp example-cnfs/coredns/cnf-testsuite.yml /shared/$DIR
        mv .github/workflows/check_litmus.sh /shared/$DIR
        mv ./cnf-testsuite /shared/$DIR
        docker run --network none --privileged -v /shared/$DIR/cnf-testsuite:/cnf-testsuite -v /shared/$DIR/airgapped.tar.gz:/airgapped/airgapped.tar.gz -v /shared/$DIR/check_litmus.sh:/litmus.sh -v /shared/$DIR/tmpdata:/tmp -v /shared/$DIR/cnf-testsuite.yml:/cnf-testsuite.yml -t conformance/offline:v0.11.1 /bin/bash -c "LOG_LEVEL=info /cnf-testsuite cnf_setup cnf-config=/cnf-testsuite.yml input-file=/airgapped/airgapped.tar.gz; LOG_LEVEL=info /cnf-testsuite all offline=true ~reasonable_startup_time ~reasonable_image_size ~pod_network_latency ~chaos_network_loss ~chaos_cpu_hog ~chaos_container_kill ~disk_fill ~platform ~volume_hostpath_not_found ~privileged ~increase_capacity ~decrease_capacity ~install_script_helm ~helm_chart_valid ~helm_chart_published verbose"

  test_helm_directory_in_airgapped_env:
    name: Test helm directory In An Airgapped Env.
    needs: [build, debug_output, skip]
    runs-on: [default]
    #runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    # - uses: mxschmitt/action-tmate@v3
    #   if: needs.debug_output.outputs.release-debug == 'true'
    - name: Create Cluster & Run Tests.
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        sudo rm -rf /tmp/*
        export DIR=$(uuidgen)
        mkdir /shared/$DIR
        # Create Airgapped Tar
        chmod +x ./cnf-testsuite
        ./cnf-testsuite setup 
        helm repo add stable https://cncf.gitlab.io/stable
        ./cnf-testsuite airgapped output-file=/shared/$DIR/airgapped.tar.gz
        LOG_LEVEL=debug ./cnf-testsuite cnf_setup cnf-config=sample-cnfs/sample_coredns/cnf-testsuite.yml airgapped=/shared/$DIR/airgapped.tar.gz
        #DOTO Use pre-created airgapped.tar.gz
        mv ./cnf-testsuite /shared/$DIR
        cp -r sample-cnfs/sample_coredns /shared/$DIR
        docker run --network none --privileged -v /shared/$DIR/cnf-testsuite:/cnf-testsuite -v /shared/$DIR/airgapped.tar.gz:/airgapped/airgapped.tar.gz -v /shared/$DIR/tmpdata:/tmp -v /shared/$DIR/sample_coredns:/sample_coredns -t conformance/offline:v0.11.1 /bin/bash -c "LOG_LEVEL=info /cnf-testsuite cnf_setup cnf-config=/sample_coredns/cnf-testsuite.yml input-file=/airgapped/airgapped.tar.gz; LOG_LEVEL=info /cnf-testsuite all offline=true ~reasonable_startup_time ~reasonable_image_size ~pod_network_latency ~chaos_network_loss ~chaos_cpu_hog ~chaos_container_kill ~disk_fill ~platform ~volume_hostpath_not_found ~privileged ~increase_capacity ~decrease_capacity ~install_script_helm ~helm_chart_valid ~helm_chart_published verbose"

  test_manifest_directory_in_airgapped_env:
    name: Test manifest directory In An Airgapped Env.
    needs: [build, debug_output, skip]
    runs-on: [default]
    #runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    # - uses: mxschmitt/action-tmate@v3
    #   if: needs.debug_output.outputs.release-debug == 'true'
    - name: Create Cluster & Run Tests.
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        sudo rm -rf /tmp/*
        export DIR=$(uuidgen)
        mkdir /shared/$DIR
         #Create Airgapped Tar
        chmod +x ./cnf-testsuite
        ./cnf-testsuite setup 
        helm repo add stable https://cncf.gitlab.io/stable
        ./cnf-testsuite airgapped output-file=/shared/$DIR/airgapped.tar.gz
        LOG_LEVEL=debug ./cnf-testsuite cnf_setup cnf-config=sample-cnfs/k8s-non-helm/cnf-testsuite.yml airgapped=/shared/$DIR/airgapped.tar.gz
        mv ./cnf-testsuite /shared/$DIR
        #DOTO Use pre-created airgapped.tar.gz
        cp -r sample-cnfs/k8s-non-helm /shared/$DIR
        docker run --network none --privileged -v /shared/$DIR/cnf-testsuite:/cnf-testsuite -v /shared/$DIR/airgapped.tar.gz:/airgapped/airgapped.tar.gz -v /shared/$DIR/tmpdata:/tmp -v //shared/$DIR/k8s-non-helm:/k8s-non-helm -t conformance/offline:v0.11.1 /bin/bash -c "LOG_LEVEL=info /cnf-testsuite cnf_setup cnf-config=/k8s-non-helm/cnf-testsuite.yml input-file=/airgapped/airgapped.tar.gz; LOG_LEVEL=info /cnf-testsuite all offline=true ~reasonable_startup_time ~reasonable_image_size ~pod_network_latency ~chaos_network_loss ~chaos_cpu_hog ~chaos_container_kill ~disk_fill ~platform ~volume_hostpath_not_found ~privileged ~increase_capacity ~decrease_capacity ~install_script_helm ~helm_chart_valid ~helm_chart_published verbose"

  test_binary_configuration_lifecycle:
    name: Test Binary Without Source(config_lifecycle)
    needs: [build, debug_output, skip]
    runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    - uses: mxschmitt/action-tmate@v3
      if: needs.debug_output.outputs.release-debug == 'true'
    - name: Create Kind Cluster 
      run: |
        cat << EOF > /tmp/cluster.yml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry:5000"]
            endpoint = ["http://localhost:5000"]
        EOF
        kind create cluster --config=/tmp/cluster.yml
        kubectl get nodes 
    - name: Run Test Suite without source(config_lifecycle)
      run: |
        helm repo add stable https://cncf.gitlab.io/stable
        chmod +x ./cnf-testsuite
        ./cnf-testsuite setup
        wget -O cnf-testsuite.yml https://raw.githubusercontent.com/cncf/cnf-testsuite/main/example-cnfs/coredns/cnf-testsuite.yml
        ./cnf-testsuite cnf_setup cnf-config=./cnf-testsuite.yml
        LOG_LEVEL=info ./cnf-testsuite all ~reasonable_startup_time ~reasonable_image_size ~pod_network_latency ~chaos_network_loss ~chaos_cpu_hog ~chaos_container_kill ~platform ~volume_hostpath_not_found ~privileged ~increase_capacity ~decrease_capacity ~install_script_helm ~helm_chart_valid ~helm_chart_published verbose

  test_binary_microservice:
    name: Test Binary Without Source(microservice)
    needs: [build, debug_output, skip]
    runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    - uses: mxschmitt/action-tmate@v3
      if: needs.debug_output.outputs.release-debug == 'true'
    - name: Create Kind Cluster 
      run: |
        cat << EOF > /tmp/cluster.yml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry:5000"]
            endpoint = ["http://localhost:5000"]
        EOF
        kind create cluster --config=/tmp/cluster.yml
        kubectl get nodes 
    - name: Run Test Suite without source(microservice)
      run: |
        helm repo add stable https://cncf.gitlab.io/stable
        chmod +x ./cnf-testsuite
        ./cnf-testsuite setup
        wget -O cnf-testsuite.yml https://raw.githubusercontent.com/cncf/cnf-testsuite/main/example-cnfs/coredns/cnf-testsuite.yml
        ./cnf-testsuite cnf_setup cnf-config=./cnf-testsuite.yml
        LOG_LEVEL=info ./cnf-testsuite all ~pod_network_latency ~chaos_network_loss ~chaos_cpu_hog ~chaos_container_kill ~platform ~volume_hostpath_not_found ~privileged ~increase_capacity ~decrease_capacity ~ip_addresses ~liveness ~readiness ~rolling_update ~rolling_downgrade ~rolling_version_change ~nodeport_not_used ~hardcoded_ip_addresses_in_k8s_runtime_configuration ~install_script_helm ~helm_chart_valid ~helm_chart_published ~rollback ~secrets_used ~immutable_configmap verbose

  test_binary_all:
    name: Test Binary Without Source(all)
    needs: [build, debug_output, skip]
    runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    - uses: mxschmitt/action-tmate@v3
      if: needs.debug_output.outputs.release-debug == 'true'
    - name: Create Kind Cluster 
      run: |
        cat << EOF > /tmp/cluster.yml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry:5000"]
            endpoint = ["http://localhost:5000"]
        EOF
        kind create cluster --config=/tmp/cluster.yml
        kubectl get nodes 
    - name: Run Test Suite without source(all)
      run: |
        helm repo add stable https://cncf.gitlab.io/stable
        chmod +x ./cnf-testsuite
        ./cnf-testsuite setup
        wget -O cnf-testsuite.yml https://raw.githubusercontent.com/cncf/cnf-testsuite/main/example-cnfs/coredns/cnf-testsuite.yml
        ./cnf-testsuite cnf_setup cnf-config=./cnf-testsuite.yml
        LOG_LEVEL=info ./cnf-testsuite all ~pod_network_latency ~chaos_network_loss ~chaos_cpu_hog ~chaos_container_kill ~platform ~ip_addresses ~liveness ~readiness ~rolling_update ~rolling_downgrade ~rolling_version_change ~nodeport_not_used ~hardcoded_ip_addresses_in_k8s_runtime_configuration ~rollback ~secrets_used ~immutable_configmap ~reasonable_startup_time ~reasonable_image_size verbose

  release:
    name: Publish Release
    needs: [spec, build, debug_output]
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    - uses: mxschmitt/action-tmate@v3
      if: needs.debug_output.outputs.release-debug == 'true'
    - name: Make release executable
      run: chmod +x ./cnf-testsuite
    - name: Publish Release
      env:
        GITHUB_USER: ${{ secrets.GH_USER }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        if [ -z "${GITHUB_USER+x}" ] || [ -z "${GITHUB_TOKEN+x}" ]; then
          exit 0
        else
          ./cnf-testsuite upsert_release
        fi
